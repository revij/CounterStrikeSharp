name: Build & Publish

# Remove default permissions of GITHUB_TOKEN for security
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
permissions: {}

on:
  push:
    paths-ignore:
      - "docfx/**"
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      gitversion_semver: ${{ steps.gitversion.outputs.semVer }}
      gitversion_fullsemver: ${{ steps.gitversion.outputs.fullSemVer }}
      gitversion_assemblysemver: ${{ steps.gitversion.outputs.assemblySemVer }}
      gitversion_informationalversion: ${{ steps.gitversion.outputs.informationalVersion }}
    steps:
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1
      with:
        versionSpec: 6.0.x

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Execute GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1
      with:
        useConfigFile: true

  build_linux:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    # Could not figure out how to run in a container only on some matrix paths, so I've split it out into its own build.
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
    steps:
      - name: Prepare env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "SEMVER=${{ needs.setup.outputs.gitversion_semver }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
          cmake --build . --config ${{ matrix.build_type }} -- -j16

      - name: Clean build directory
        run: |
          mkdir build/output/
          mv build/addons build/output

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-linux-${{ needs.setup.outputs.gitversion_semver }}
          path: build/output/

  build_managed:
    needs: setup
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # We don't need expensive submodules for the managed side.
      - uses: actions/checkout@v4

      - name: Build runtime v${{ needs.setup.outputs.gitversion_semver }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore managed/CounterStrikeSharp.sln

      - name: Run tests
        run: dotnet test --logger trx --results-directory "TestResults-${{ needs.setup.outputs.gitversion_semver }}" managed/CounterStrikeSharp.API.Tests/CounterStrikeSharp.API.Tests.csproj

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-test-results-${{ needs.setup.outputs.gitversion_semver }}
          path: TestResults-${{ needs.setup.outputs.gitversion_semver }}
        if: ${{ always() }}

      - name: Publish artifacts
        run: |
          dotnet publish -c ${{ matrix.build_type }} \
          /p:Version=${{ needs.setup.outputs.gitversion_semver }} \
          /p:AssemblyVersion=${{ needs.setup.outputs.gitversion_assemblySemver }} \
          /p:InformationalVersion=${{ needs.setup.outputs.gitversion_informationalversion }} \
          managed/CounterStrikeSharp.API
          
          dotnet pack -c ${{ matrix.build_type }} \
          /p:Version=${{ needs.setup.outputs.gitversion_semver }} \
          /p:AssemblyVersion=${{ needs.setup.outputs.gitversion_assemblySemver }} \
          /p:InformationalVersion=${{ needs.setup.outputs.gitversion_informationalversion }} \
          managed/CounterStrikeSharp.API

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-api-${{ needs.setup.outputs.gitversion_semver }}
          path: managed/CounterStrikeSharp.API/bin/${{ matrix.build_type }}

  publish:
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: write
    needs: ["setup", "build_linux", "build_managed"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-linux-${{ needs.setup.outputs.gitversion_semver }}
          path: build/linux

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-api-${{ needs.setup.outputs.gitversion_semver }}
          path: build/api

      # TODO: This stuff should really be in a matrix
      - name: Add API to Artifacts
        run: |
          mkdir -p build/linux/addons/counterstrikesharp/api
          cp -r build/api/net8.0/publish/* build/linux/addons/counterstrikesharp/api

      - name: Zip Builds
        run: |
          (cd build/linux && zip -qq -r ../../${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-linux-${{ needs.setup.outputs.gitversion_semver }}.zip *)

      - name: Add dotnet runtime
        run: |
          mkdir -p build/linux/addons/counterstrikesharp/dotnet
          curl -s -L https://download.visualstudio.microsoft.com/download/pr/c1371dc2-eed2-47be-9af3-ae060dbe3c7d/bd509e0a87629764ed47608466d183e6/aspnetcore-runtime-8.0.3-linux-x64.tar.gz \
          | tar xvz -C build/linux/addons/counterstrikesharp/dotnet

      - name: Zip Builds with Runtime
        run: |
          (cd build/linux && zip -qq -r ../../${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-with-runtime-linux-${{ needs.setup.outputs.gitversion_semver }}.zip *)
      
      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          body: |
            CSS ${{ matrix.build_type }} build
          files: |
            ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-linux-${{ needs.setup.outputs.gitversion_semver }}.zip
            ${{ matrix.build_type == 'Debug' && 'debug' || 'release' }}-counterstrikesharp-with-runtime-linux-${{ needs.setup.outputs.gitversion_semver }}.zip
